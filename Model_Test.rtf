{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red255\green255\blue255;\red210\green220\blue220;
\red111\green193\blue194;\red108\green122\blue122;\red22\green146\blue150;\red237\green137\blue17;}
{\*\expandedcolortbl;;\cssrgb\c77331\c52624\c75301;\cssrgb\c100000\c100000\c100000;\cssrgb\c85484\c89016\c88909;
\cssrgb\c49914\c79742\c80464;\cssrgb\c49870\c54972\c55302;\cssrgb\c4821\c63301\c65256;\cssrgb\c95041\c60853\c6616;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
#include\cf4  \cf5 <MPU6050.h>\cf4 \
\
\pard\pardeftab720\partightenfactor0
\cf6 /* Edge Impulse ingestion SDK\cf4 \
\cf6  * Copyright (c) 2022 EdgeImpulse Inc.\cf4 \
\cf6  *\cf4 \
\cf6  * Licensed under the Apache License, Version 2.0 (the "License");\cf4 \
\cf6  * you may not use this file except in compliance with the License.\cf4 \
\cf6  * You may obtain a copy of the License at\cf4 \
\cf6  * http://www.apache.org/licenses/LICENSE-2.0\cf4 \
\cf6  *\cf4 \
\cf6  * Unless required by applicable law or agreed to in writing, software\cf4 \
\cf6  * distributed under the License is distributed on an "AS IS" BASIS,\cf4 \
\cf6  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\cf4 \
\cf6  * See the License for the specific language governing permissions and\cf4 \
\cf6  * limitations under the License.\cf4 \
\cf6  *\cf4 \
\cf6  */\cf4 \
\
\cf6 /* Includes ---------------------------------------------------------------- */\cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 #include\cf4  \cf5 <beast22803-project-1_inferencing.h>\cf4 \
\cf2 #include\cf4  \cf5 "I2Cdev.h"\cf4 \
\cf2 #include\cf4  \cf5 "MPU6050.h"\cf4 \
\cf2 #include\cf4  \cf5 "Wire.h"\cf4 \
\
\pard\pardeftab720\partightenfactor0
\cf6 /* Constant defines -------------------------------------------------------- */\cf4 \
MPU6050 imu;\
\pard\pardeftab720\partightenfactor0
\cf7 int16_t\cf4  ax, ay, az;\
\
\pard\pardeftab720\partightenfactor0
\cf2 #define\cf4  \cf8 ACC_RANGE\cf4            \cf5 1\cf6  // 0: -/+2G; 1: +/-4G\cf4 \
\cf2 #define\cf4  \cf8 CONVERT_G_TO_MS2\cf4     (\cf5 9.81\cf4 /(\cf5 16384\cf4 /(\cf5 1.\cf4 +ACC_RANGE)))\
\cf2 #define\cf4  \cf8 MAX_ACCEPTED_RANGE\cf4   (2*9.81)+(\cf5 2\cf4 *\cf5 9.81\cf4 )*ACC_RANGE   \
\
\pard\pardeftab720\partightenfactor0
\cf6 /*\cf4 \
\cf6  ** NOTE: If you run into TFLite arena allocation issue.\cf4 \
\cf6  **\cf4 \
\cf6  ** This may be due to may dynamic memory fragmentation.\cf4 \
\cf6  ** Try defining "-DEI_CLASSIFIER_ALLOCATION_STATIC" in boards.local.txt (create\cf4 \
\cf6  ** if it doesn't exist) and copy this file to\cf4 \
\cf6  ** <ARDUINO_CORE_INSTALL_PATH>/arduino/hardware/<mbed_core>/<core_version>/.\cf4 \
\cf6  **\cf4 \
\cf6  ** See\cf4 \
\cf6  ** (https://support.arduino.cc/hc/en-us/articles/360012076960-Where-are-the-installed-cores-located-)\cf4 \
\cf6  ** to find where Arduino installs cores on your machine.\cf4 \
\cf6  **\cf4 \
\cf6  ** If the problem persists then there's not enough memory for this model and application.\cf4 \
\cf6  */\cf4 \
\
\cf6 /* Private variables ------------------------------------------------------- */\cf4 \
\pard\pardeftab720\partightenfactor0
\cf7 static\cf4  \cf7 bool\cf4  debug_nn = \cf5 false\cf4 ;\cf6  // Set this to true to see e.g. features generated from the raw signal\cf4 \
\
\pard\pardeftab720\partightenfactor0
\cf6 /**\cf4 \
\cf6 * \cf7 @brief\cf6       Arduino setup function\cf4 \
\cf6 */\cf4 \
\pard\pardeftab720\partightenfactor0
\cf7 void\cf4  \cf8 setup\cf4 ()\
\{\
\pard\pardeftab720\partightenfactor0
\cf6     // put your setup code here, to run once:\cf4 \
    \cf8 Serial\cf4 .\cf8 begin\cf4 (\cf5 115200\cf4 );\
\cf6     // comment out the below line to cancel the wait for USB connection (needed for native USB)\cf4 \
    \cf2 while\cf4  (!Serial);\
    \cf8 Serial\cf4 .\cf8 println\cf4 (\cf5 "Edge Impulse Inferencing Demo"\cf4 );\
\
\cf6     // initialize device\cf4 \
    \cf8 Serial\cf4 .\cf8 println\cf4 (\cf5 "Initializing I2C devices..."\cf4 );\
    \cf8 Wire\cf4 .\cf8 begin\cf4 ();\
    \cf8 imu\cf4 .\cf8 initialize\cf4 ();\
    \cf8 delay\cf4 (\cf5 10\cf4 );\
\
\cf6     //Set MCU 6050 OffSet Calibration \cf4 \
    \cf8 imu\cf4 .\cf8 setXAccelOffset\cf4 (\cf5 357\cf4 );\
    \cf8 imu\cf4 .\cf8 setYAccelOffset\cf4 (-\cf5 293\cf4 );\
    \cf8 imu\cf4 .\cf8 setZAccelOffset\cf4 (\cf5 1372\cf4 );\
    \cf8 imu\cf4 .\cf8 setXGyroOffset\cf4 (\cf5 56\cf4 );\
    \cf8 imu\cf4 .\cf8 setYGyroOffset\cf4 (\cf5 25\cf4 );\
    \cf8 imu\cf4 .\cf8 setZGyroOffset\cf4 (\cf5 5\cf4 );\
\
    \cf8 imu\cf4 .\cf8 setFullScaleAccelRange\cf4 (ACC_RANGE);\
\
    \cf2 if\cf4  (EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME != \cf5 3\cf4 ) \{\
        \cf8 ei_printf\cf4 (\cf5 "ERR: EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME should be equal to 3 (the 3 sensor axes)\\n"\cf4 );\
        \cf2 return\cf4 ;\
    \}\
\}\
\
\cf6 /**\cf4 \
\cf6  * \cf7 @brief\cf6  Return the sign of the number\cf4 \
\cf6  * \cf4 \
\cf6  * \cf7 @param\cf6  \cf4 number\cf6  \cf4 \
\cf6  * \cf7 @return\cf6  int 1 if positive (or 0) -1 if negative\cf4 \
\cf6  */\cf4 \
\pard\pardeftab720\partightenfactor0
\cf7 float\cf4  \cf8 ei_get_sign\cf4 (\cf7 float\cf4  number) \{\
    \cf2 return\cf4  (number >= \cf5 0.0\cf4 ) ? \cf5 1.0\cf4  : -\cf5 1.0\cf4 ;\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf6 /**\cf4 \
\cf6 * \cf7 @brief\cf6       Get data and run inferencing\cf4 \
\cf6 *\cf4 \
\cf6 * \cf7 @param\cf6 [in]  \cf4 debug\cf6   Get debug info if true\cf4 \
\cf6 */\cf4 \
\pard\pardeftab720\partightenfactor0
\cf7 void\cf4  \cf8 loop\cf4 ()\
\{\
    \cf8 ei_printf\cf4 (\cf5 "\\nStarting inferencing in 2 seconds...\\n"\cf4 );\
\
    \cf8 delay\cf4 (\cf5 2000\cf4 );\
\
    \cf8 ei_printf\cf4 (\cf5 "Sampling...\\n"\cf4 );\
\
\pard\pardeftab720\partightenfactor0
\cf6     // Allocate a buffer here for the values we'll read from the IMU\cf4 \
    \cf7 float\cf4  \cf8 buffer\cf4 [EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE] = \{ \cf5 0\cf4  \};\
\
    \cf2 for\cf4  (\cf7 size_t\cf4  ix = \cf5 0\cf4 ; ix < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; ix += \cf5 3\cf4 ) \{\
\cf6         // Determine the next tick (and then sleep later)\cf4 \
        \cf7 uint64_t\cf4  next_tick = \cf8 micros\cf4 () + (EI_CLASSIFIER_INTERVAL_MS * \cf5 1000\cf4 );\
\
        \cf8 imu\cf4 .\cf8 getAcceleration\cf4 (&ax, &ay, &az);       \
        \cf8 buffer\cf4 [ix + \cf5 0\cf4 ] = ax;\
        \cf8 buffer\cf4 [ix + \cf5 1\cf4 ] = ay;\
        \cf8 buffer\cf4 [ix + \cf5 2\cf4 ] = az;\
       \
\cf6         //ei_printf("raw values:    %.2f, %.2f, %.2f\\n", ax*CONVERT_G_TO_MS2, ay*CONVERT_G_TO_MS2, az*CONVERT_G_TO_MS2);\cf4 \
        \
        \cf8 buffer\cf4 [ix + \cf5 0\cf4 ] *= CONVERT_G_TO_MS2;\
        \cf8 buffer\cf4 [ix + \cf5 1\cf4 ] *= CONVERT_G_TO_MS2;\
        \cf8 buffer\cf4 [ix + \cf5 2\cf4 ] *= CONVERT_G_TO_MS2;\
\
        \cf2 for\cf4  (\cf7 int\cf4  i = \cf5 0\cf4 ; i < \cf5 3\cf4 ; i++) \{\
            \cf2 if\cf4  (\cf8 fabs\cf4 (\cf8 buffer\cf4 [ix + i]) > MAX_ACCEPTED_RANGE) \{\
                \cf8 buffer\cf4 [ix + i] = \cf8 ei_get_sign\cf4 (\cf8 buffer\cf4 [ix + i]) * MAX_ACCEPTED_RANGE;\
            \}\
        \}\
\
        \cf8 delayMicroseconds\cf4 (next_tick - \cf8 micros\cf4 ());\
    \}\
\
\cf6     // Turn the raw buffer in a signal which we can the classify\cf4 \
    \cf7 signal_t\cf4  signal;\
    \cf7 int\cf4  err = numpy::\cf8 signal_from_buffer\cf4 (buffer, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, &signal);\
    \cf2 if\cf4  (err != \cf5 0\cf4 ) \{\
        \cf8 ei_printf\cf4 (\cf5 "Failed to create signal from buffer (%d)\\n"\cf4 , err);\
        \cf2 return\cf4 ;\
    \}\
\
\cf6     // Run the classifier\cf4 \
    \cf7 ei_impulse_result_t\cf4  result = \{ \cf5 0\cf4  \};\
\
    err = \cf8 run_classifier\cf4 (&signal, &result, debug_nn);\
    \cf2 if\cf4  (err != EI_IMPULSE_OK) \{\
        \cf8 ei_printf\cf4 (\cf5 "ERR: Failed to run classifier (%d)\\n"\cf4 , err);\
        \cf2 return\cf4 ;\
    \}\
\
\cf6     // print the predictions\cf4 \
    \cf8 ei_printf\cf4 (\cf5 "Predictions "\cf4 );\
    \cf8 ei_printf\cf4 (\cf5 "(DSP: %d ms., Classification: %d ms., Anomaly: %d ms.)"\cf4 ,\
        \cf8 result\cf4 .\cf8 timing\cf4 .\cf8 dsp\cf4 , \cf8 result\cf4 .\cf8 timing\cf4 .\cf8 classification\cf4 , \cf8 result\cf4 .\cf8 timing\cf4 .\cf8 anomaly\cf4 );\
    \cf8 ei_printf\cf4 (\cf5 ": \\n"\cf4 );\
    \cf2 for\cf4  (\cf7 size_t\cf4  ix = \cf5 0\cf4 ; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) \{\
        \cf8 ei_printf\cf4 (\cf5 "    %s: %.5f\\n"\cf4 , \cf8 result\cf4 .\cf8 classification\cf4 [ix].\cf8 label\cf4 , \cf8 result\cf4 .\cf8 classification\cf4 [ix].\cf8 value\cf4 );\
    \}\
\pard\pardeftab720\partightenfactor0
\cf2 #if\cf4  \cf8 EI_CLASSIFIER_HAS_ANOMALY\cf4  == \cf5 1\cf4 \
    \cf8 ei_printf\cf4 (\cf5 "    anomaly score: %.3f\\n"\cf4 , \cf8 result\cf4 .\cf8 anomaly\cf4 );\
\cf2 #endif\cf4 \
\}\
\
\cf2 #if\cf4  !\cf2 defined\cf4 (\cf8 EI_CLASSIFIER_SENSOR\cf4 )\
\cf2 #error\cf4  \cf5 "Invalid model for current sensor"\cf4 \
\cf2 #endif\cf4 \
}